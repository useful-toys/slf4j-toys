/*
 * Copyright 2025 Daniel Felix Ferber
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.usefultoys.slf4j.watcher;

import org.awaitility.Awaitility;
import org.junit.jupiter.api.*;
import org.slf4j.LoggerFactory;
import org.slf4j.impl.MockLogger;
import org.usefultoys.slf4j.SessionConfig;
import org.usefultoys.slf4j.SystemConfig;

import java.nio.charset.Charset;
import java.util.Timer;
import java.util.TimerTask;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.TimeUnit;

import static org.junit.jupiter.api.Assertions.*;

class WatcherSingletonTest {

    @BeforeAll
    static void validate() {
        assertEquals(Charset.defaultCharset().name(), SessionConfig.charset, "Test requires SessionConfig.charset = default charset");
    }

    @BeforeEach
    void resetWatcherConfigBeforeEach() {
        // Reinitialize WatcherConfig to ensure clean configuration before each test
        WatcherConfig.reset();
        SessionConfig.reset();
        SystemConfig.reset();
    }

    @AfterAll
    static void resetWatcherConfigAfterAll() {
        // Reinitialize WatcherConfig to ensure clean configuration for further tests
        WatcherConfig.reset();
        SessionConfig.reset();
        SystemConfig.reset();
    }

    private MockLogger mockLogger = (MockLogger) LoggerFactory.getLogger(WatcherConfig.name);;

    @BeforeEach
    void setupLogger() {
        mockLogger.setEnabled(true);
        mockLogger.clearEvents();
    }

    @AfterEach
    void clearLogger() {
        mockLogger.setEnabled(true);
        mockLogger.clearEvents();
    }

    @AfterEach
    void stopAllWatchers() {
        WatcherSingleton.stopDefaultWatcherExecutor();
        WatcherSingleton.stopDefaultWatcherTimer();
    }

    @Test
    void shouldLogStatusWithExecutor() {
        // Arrange
        WatcherConfig.delayMilliseconds = 200;
        WatcherConfig.periodMilliseconds = 200;

        assertNull(WatcherSingleton.defaultWatcherExecutor);
        assertNull(WatcherSingleton.scheduledDefaultWatcher);

        assertDoesNotThrow(() -> WatcherSingleton.startDefaultWatcherExecutor());
        assertNotNull(WatcherSingleton.defaultWatcherExecutor);
        assertNotNull(WatcherSingleton.scheduledDefaultWatcher);

        final ScheduledExecutorService executor = WatcherSingleton.defaultWatcherExecutor;
        final ScheduledFuture<?> watcher = WatcherSingleton.scheduledDefaultWatcher;

        // Must support calling the start method multiple times without disruption
        assertDoesNotThrow(() -> WatcherSingleton.startDefaultWatcherExecutor());
        assertEquals(executor, WatcherSingleton.defaultWatcherExecutor);
        assertEquals(watcher, WatcherSingleton.scheduledDefaultWatcher);

        // Wait for log messages to be generated by scheduled task
        Awaitility.await().atMost(2, TimeUnit.SECONDS).until(() ->
                mockLogger.getEventCount() > 0
        );

        assertTrue(mockLogger.getEventCount() == 1);
        assertTrue(mockLogger.getEvent(0).getFormattedMessage().contains("Memory:"));

        assertDoesNotThrow(() -> WatcherSingleton.stopDefaultWatcherExecutor());
        assertNull(WatcherSingleton.defaultWatcherExecutor);
        assertNull(WatcherSingleton.scheduledDefaultWatcher);

        // Must support calling the stop method multiple times without disruption
        assertDoesNotThrow(() -> WatcherSingleton.stopDefaultWatcherExecutor());
        assertNull(WatcherSingleton.defaultWatcherExecutor);
        assertNull(WatcherSingleton.scheduledDefaultWatcher);
    }

    @Test
    void shouldLogStatusWithTimer() {
        // Arrange
        WatcherConfig.delayMilliseconds = 200;
        WatcherConfig.periodMilliseconds = 200;

        assertNull(WatcherSingleton.defaultWatcherTimer);
        assertNull(WatcherSingleton.defaultWatcherTask);

        assertDoesNotThrow(() -> WatcherSingleton.startDefaultWatcherTimer());
        assertNotNull(WatcherSingleton.defaultWatcherTimer);
        assertNotNull(WatcherSingleton.defaultWatcherTask);
        final Timer timer = WatcherSingleton.defaultWatcherTimer;
        final TimerTask watcher = WatcherSingleton.defaultWatcherTask;

        // Must support calling the start method multiple times without disruption
        assertDoesNotThrow(() -> WatcherSingleton.startDefaultWatcherTimer());
        assertEquals(timer, WatcherSingleton.defaultWatcherTimer);
        assertEquals(watcher, WatcherSingleton.defaultWatcherTask);

        // Wait for log messages to be generated by scheduled task
        Awaitility.await().atMost(2, TimeUnit.SECONDS).until(() ->
                mockLogger.getEventCount() > 0
        );

        assertTrue(mockLogger.getEventCount() == 1);
        assertTrue(mockLogger.getEvent(0).getFormattedMessage().contains("Memory:"));

        assertDoesNotThrow(() -> WatcherSingleton.stopDefaultWatcherTimer());
        assertNull(WatcherSingleton.defaultWatcherTimer);
        assertNull(WatcherSingleton.defaultWatcherTask);

        // Must support calling the stop method multiple times without disruption
        assertDoesNotThrow(() -> WatcherSingleton.stopDefaultWatcherTimer());
        assertNull(WatcherSingleton.defaultWatcherTimer);
        assertNull(WatcherSingleton.defaultWatcherTask);
    }
}
